# -*- coding: utf-8 -*-
"""Assigment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzZho8QpbN7oqEY-rKr7DPRcm7jdZm0Y

### Importing Important Libraries
"""

import pandas as pd # import panda library as pd for data manipulation
import matplotlib.pyplot as plt # import matplotlib as plt for data visualitzation
from matplotlib import style
import numpy as np # import nump as np
import seaborn as sns # seaborn is data visualization library build on matplotlib
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

"""### Implement a Function Which return Original DataFrame, Transposed DataFrames"""

def transpose_file(filename: str):

    # Read the file into a pandas dataframe
    dataframe = pd.read_csv(filename)

    # Transpose the dataframe
    df_transposed = dataframe.transpose()

    # Populate the header of the transposed dataframe with the header information

    # silice the dataframe to get the year as columns
    df_transposed.columns = df_transposed.iloc[1]

    # As year is now columns so we don't need it as rows
    transposed_year = df_transposed[0:].drop('year')

    # silice the dataframe to get the country as columns
    df_transposed.columns = df_transposed.iloc[0]

    # As country is now columns so we don't need it as rows
    transposed_country = df_transposed[0:].drop('country')

    return dataframe, transposed_country, transposed_year

# Passing filename to Real Worldbank data function
# will return three dataframe:
# org dataframe, transposed country as columns and transposed year as column

org_df, df_by_country, df_by_year = transpose_file('/content/worldbank_dataset.csv')

"""### Original DataFrame"""

# show the first 5 row
org_df.head(5)

"""### show the statistics of Original Data"""

org_df.describe() #describe method show the statistic of dataframe

"""### DataFrame In Which Countries are Columns"""

# show the first 5 row
df_by_country.head(5)

"""### DataFrame In Which Year are Columns"""

# show the first 5 row
df_by_year

org_df.columns

"""### Create DataFrame related to Urban Population
### For All the countries and years
"""

# we want to see countries urban_population over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
urban_population = org_df[['country', 'year', 'urban_population']].dropna()

"""### Get Data to Specific Years from 1990 to 2020"""

import random

# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

countries = org_df.country.unique()
countries

"""### Plot Barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = urban_population[urban_population['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['urban_population'], color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("Urban Population", fontsize=15)

# Add country names to the x-axis ticks
plt.xticks(np.arange(len(countries)) + 0.2, countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

org_df.columns

"""### Get data of Total Population over the years"""

# we want to see countries total_population over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
total_population = org_df[['country', 'year', 'total_population']].dropna()

"""### Filter from specific year from 1990 to 2020"""

import random

# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

countries = total_population.country.unique()

"""### PLOT barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = total_population[total_population['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['total_population'], color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("Total Population", fontsize=15)

# Add country names to the x-axis ticks
plt.xticks(np.arange(len(countries)) + 0.2, countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

org_df.country.unique()

"""### Making a DataFrame related to Syrian Arab Republic Data"""

# making dataframe of Syrian Arab Republic data from the original dataframe
sar = org_df[org_df['country'] == 'Syrian Arab Republic']

"""### Implement a Function which removes Null values and return clean data"""

def remove_null_values(feature):
    return np.array(feature.dropna())

"""### For the Features Present In sa DataFrame remove the null values
### Print Each Features Size
"""

org_df.columns[2:]

# List of columns to extract
columns_of_interest = ['nitrous_oxide', 'co2_emissions', 'greenhouse_gas_emissions',
       'agricultural_land', 'total_population', 'population_growth',
       'renewable_energy_consumption', 'urban_population', 'GDP',
       'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(sar[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 26

# Create the DataFrame using dictionary comprehension
sar_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = sar_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='YlGnBu', fmt=".2f")
plt.title('Correlation Heatmap for Syrian Arab Republic')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to Portugal"""

# making dataframe of Vanuatu data from the original dataframe
pt = org_df[org_df['country'] == 'Portugal']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

pt.columns

# List of columns to extract
columns_of_interest = ['nitrous_oxide', 'co2_emissions',
       'greenhouse_gas_emissions', 'agricultural_land', 'total_population',
       'population_growth', 'renewable_energy_consumption', 'urban_population',
       'GDP', 'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(pt[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 26

# Create the DataFrame using dictionary comprehension
pt_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = pt_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt=".2f")
plt.title('Correlation Heatmap for Portugal')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to Colombia"""

# making dataframe of Colombia data from the original dataframe
col = org_df[org_df['country'] == 'Colombia']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

col.columns

# List of columns to extract
columns_of_interest = ['nitrous_oxide', 'co2_emissions',
       'greenhouse_gas_emissions', 'agricultural_land', 'total_population',
       'population_growth', 'renewable_energy_consumption', 'urban_population',
       'GDP', 'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(col[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 26

# Create the DataFrame using dictionary comprehension
col_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})

import seaborn as sns
import matplotlib.pyplot as plt

# Create a correlation matrix
correlation_matrix = col_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Greens', fmt=".2f")
plt.title('Correlation Heatmap for Colombia')
plt.show()

correlation_matrix

org_df.columns

"""### Get the Year, Country Data Related to Renewable Energy Consumption"""

# we want to see countries renewable_energy_consumption over the years
# we need to filter our original data frame to get specific fields
renewable_energy_consumption = org_df[['country','year','renewable_energy_consumption']]

# drop the null values present in the dataset
renewable_energy_consumption  = renewable_energy_consumption.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of Renewable Energy Consumption"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot population_growth over the years
for country in countries:
    country_data = renewable_energy_consumption[renewable_energy_consumption['country'] == country]
    plt.plot(country_data['year'], country_data['renewable_energy_consumption'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Renewable Energy Consumption")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

"""### Get the Year, Country Data Related to Nitrous Oxide"""

# we want to see countries nitrous_oxide over the years
# we need to filter our original data frame to get specific fields
nitrous_oxide = org_df[['country','year','nitrous_oxide']]

# drop the null values present in the dataset
nitrous_oxide  = nitrous_oxide.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of nitrous_oxide"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot nitrous_oxide over the years
for country in countries:
    country_data = nitrous_oxide[nitrous_oxide['country'] == country]
    plt.plot(country_data['year'], country_data['nitrous_oxide'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Nitrous Oxide")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

org_df.columns

# we want to see countries co2_emissions over the years
co2_emissions = org_df[['country','year','co2_emissions']]

# drop the null values present in the dataset
co2_emissions = co2_emissions.dropna()

### Filter from specific year from 1990 to 2015
# filter data related to 1990
co2_emissions_1990 = co2_emissions[co2_emissions['year'] == 1990]

# filter data related to 2010
co2_emissions_2010 = co2_emissions[co2_emissions['year'] == 2010]

# filter data related to 2020
co2_emissions_2020 = co2_emissions[co2_emissions['year'] == 2020]

co2_emissions_1990

co2_emissions_2010

co2_emissions_2020